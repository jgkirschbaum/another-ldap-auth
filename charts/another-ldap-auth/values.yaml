# -- should not be changed, due to caching is done on a per pod basis.
# Only use it in very heavy loaded environments
replicaCount: 1

image:
  # -- Path to the image
  repository: jgkirschbaum/another-ldap-auth
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Image tag to use
  tag: "3.1.0"

# -- Specify docker-registry secret names as an array
imagePullSecrets: []
# -- String to partially override rabbitmq.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override rabbitmq.fullname template
fullnameOverride: ""

server:
  # -- Enables or disables the [Gunicorn](https://gunicorn.org/) WSGI Server
  useWsgiServer: true
  # -- Number of worker processes for the [Gunicorn](https://gunicorn.org/) WSGI Server
  # Should not be changed, due to caching is done on a per process basis
  # Only use it in very heavy loaded environments
  numberOfWorkers: 1
  # -- Enable TLS for the pod. If `useWsgiServer` is `true` you also need the `TlsKey` and `TlsCert`.
  #  If `useWsgiServer` is `false` you need not to specify `TlsKey` and `TlsCert` and use the on the fly
  # generated key and certificate
  TlsEnabled: false
  # -- Server private key
  TlsKey: ""
  # -- Server certificate
  TlsCert: ""
  # -- Server ca certificates
  TlsCaCert: ""
  # -- Loglevel of the server: `INFO`, `WARNING`, `ERROR`, `DEBUG`
  logLevel: "INFO"
  # -- Logformat of the server: `TEXT` or `JSON`
  logFormat: "TEXT"

ldap:
  # -- Use an existing secret for the `managerDnUsername` password
  existingSecret: ""
  # -- Cache expiration in minutes
  cacheExpiration: 5
  # -- LDAP endpoint
  endpoint: "ldaps://testmyldap.com:636"
  # -- Username for LDAP bind requests
  managerDnUsername: "CN=john,OU=Administrators,DC=TESTMYLDAP,DC=COM"
  # -- Passwort for `managerDnUsername`, only used when `existingSecret` is not set
  managerDnPassword:
  # -- Depends on your LDAP server the binding structure can change.
  # This field supports variable expansion for the username.
  bindDN: "{username}@TESTMYLDAP.com"
  # -- Base in directory tree where the search starts
  searchBase: "DC=TESTMYLDAP,DC=COM"
  # -- Filter for search, for Microsoft Active Directory usually you can use `sAMAccountName`
  searchFilter: "(sAMAccountName={username})"

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Special annotations for the pod
podAnnotations: {}

# -- Special security context for the pod
podSecurityContext: {}
  # fsGroup: 2000

# -- Special security context for the container
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # runAsNonRoot: true
  # runAsUser: 1001
  # runAsGroup: 1001

service:
  # -- Type of the service
  type: ClusterIP
  # -- Port of the service
  port: 80
  # -- Protocol of the service
  protocol: TCP
  # -- Port of the container to connect
  containerPort: 9000

# -- Resource requests and limits
resources: {}

# -- Definitions for the [Horizontal Pod Autoscaler (HPA)](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/), usually not needed.
# First try setting `numberOfWorkers`
# @default -- *See values defined below*
autoscaling:
  # -- Wether the hpa is enabled or not
  enabled: false
  # -- How many replicas shout at least exist
  minReplicas: 1
  # -- Maximim number of replicas
  maxReplicas: 100
  # -- When should new replicas be started depending on cpu utilization
  targetCPUUtilizationPercentage: 80
  # -- When should new replicas be started depending on memory utilization
  targetMemoryUtilizationPercentage: ""

# -- Special node affinity settings
affinity: {}

# -- Special node selector settings
nodeSelector: {}

# -- Special tolerations settings
tolerations: []

# -- Special topology settings
topologySpreadConstraints: []
